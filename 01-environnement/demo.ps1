##############################################################################
#
# üß† Formation PowerShell - Script de d√©monstration Module 2
#
# Ce script illustre les notions abord√©es dans le Module 2 :
# - Fichier de profil
# - Customisation du prompt
# - Historique des commandes
# - Modules utiles
# - PowerShell Gallery
#
# Auteur: Formation PowerShell D√©butant √† Expert
# Date: Avril 2025
#
##############################################################################

Clear-Host

# Fonction pour cr√©er un titre de section dans la console
function Show-Title {
    param([string]$Title)

    Write-Host "`n`n============================================================" -ForegroundColor Cyan
    Write-Host "  $Title" -ForegroundColor Cyan
    Write-Host "============================================================" -ForegroundColor Cyan
}

# Fonction pour faire une pause
function Pause-Demo {
    Write-Host "`nAppuyez sur une touche pour continuer..." -ForegroundColor Yellow
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    Clear-Host
}

# Affichage du titre principal du script
$scriptTitle = @"
  _____                       _____ _          _ _
 |  __ \                     / ____| |        | | |
 | |__) |____      _____ _ _| (___ | |__   ___| | |
 |  ___/ _ \ \ /\ / / _ \ '__\___ \| '_ \ / _ \ | |
 | |  | (_) \ V  V /  __/ |  ____) | | | |  __/ | |
 |_|   \___/ \_/\_/ \___|_| |_____/|_| |_|\___|_|_|

     Module 2 - Script de d√©monstration
"@

Write-Host $scriptTitle -ForegroundColor Blue
Write-Host "`nCe script interactif d√©montre les concepts du Module 2" -ForegroundColor White
Write-Host "Suivez les instructions √† l'√©cran pour d√©couvrir la personnalisation de PowerShell" -ForegroundColor White
Start-Sleep -Seconds 2

#----------------------------------------------------------
# SECTION 1: Fichier de profil ($PROFILE)
#----------------------------------------------------------
Show-Title "2-1. Fichier de profil (`$PROFILE)"

# V√©rifier l'existence du profil
$profileExists = Test-Path -Path $PROFILE
$profileSize = if ($profileExists) { (Get-Item $PROFILE).Length } else { 0 }

Write-Host "`nInformation sur votre profil PowerShell :" -ForegroundColor Green
Write-Host "- Chemin du profil : $PROFILE"
Write-Host "- Le profil existe : " -NoNewline
if ($profileExists) {
    Write-Host "Oui" -ForegroundColor Green
    Write-Host "- Taille : $profileSize octets"
} else {
    Write-Host "Non" -ForegroundColor Red
    Write-Host "- Vous pouvez le cr√©er avec : New-Item -Path `$PROFILE -ItemType File -Force" -ForegroundColor Gray
}

# Afficher les diff√©rents types de profils
Write-Host "`nLes diff√©rents types de profils disponibles :" -ForegroundColor Green
Write-Host "- Profil utilisateur actuel, h√¥te actuel : $($PROFILE.CurrentUserCurrentHost)"
Write-Host "- Profil utilisateur actuel, tous h√¥tes : $($PROFILE.CurrentUserAllHosts)"
Write-Host "- Profil tous utilisateurs, h√¥te actuel : $($PROFILE.AllUsersCurrentHost)"
Write-Host "- Profil tous utilisateurs, tous h√¥tes : $($PROFILE.AllUsersAllHosts)"

# Afficher un exemple de contenu pour le profil
Write-Host "`nExemple de contenu pour votre profil :" -ForegroundColor Green
$profileExample = @'
# Mon profil PowerShell personnalis√©

# 1. D√©finir des alias personnalis√©s
New-Alias -Name ll -Value Get-ChildItem
New-Alias -Name grep -Value Select-String

# 2. Importer des modules utiles
Import-Module PSReadLine
Import-Module Terminal-Icons

# 3. Configurer PSReadLine
Set-PSReadLineOption -PredictionSource History
Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward
Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward

# 4. Fonction pour afficher la date et l'heure
function Get-Timestamp { Get-Date -Format "yyyy-MM-dd HH:mm:ss" }

# 5. Personnaliser le prompt
function prompt {
    $time = Get-Date -Format "HH:mm:ss"
    $location = Get-Location
    $host.UI.RawUI.WindowTitle = "PS $location"
    "[$time] PS $location> "
}

# 6. Message d'accueil
Write-Host "Bonjour $env:USERNAME! PowerShell est pr√™t." -ForegroundColor Green
Write-Host "Aujourd'hui nous sommes le $(Get-Date -Format 'dddd, dd MMMM yyyy')" -ForegroundColor Cyan
'@

Write-Host $profileExample -ForegroundColor Gray

Pause-Demo

#----------------------------------------------------------
# SECTION 2: Customisation du prompt
#----------------------------------------------------------
Show-Title "2-2. Customisation du prompt (oh-my-posh, PSReadLine)"

# V√©rifier si Oh My Posh est install√©
$ohMyPoshInstalled = $null -ne (Get-Command -Name 'oh-my-posh' -ErrorAction SilentlyContinue)

Write-Host "`nStatut de Oh My Posh :" -ForegroundColor Green
if ($ohMyPoshInstalled) {
    $ohMyPoshVersion = (oh-my-posh --version).Trim()
    Write-Host "- Oh My Posh est install√© (version $ohMyPoshVersion)" -ForegroundColor Green
} else {
    Write-Host "- Oh My Posh n'est pas install√©" -ForegroundColor Yellow
    Write-Host "- Vous pouvez l'installer avec : winget install JanDeDobbeleer.OhMyPosh" -ForegroundColor Gray
}

# D√©monstration de prompts personnalis√©s
Write-Host "`nExemples de prompts personnalis√©s :" -ForegroundColor Green

# Exemple 1: Prompt simple avec heure
$promptExample1 = @'
function prompt {
    $time = Get-Date -Format "HH:mm:ss"
    $location = Get-Location
    "[$time] PS $location> "
}
'@
Write-Host "`n1. Prompt simple avec heure :" -ForegroundColor Yellow
Write-Host $promptExample1 -ForegroundColor Gray
Write-Host "R√©sultat : " -NoNewline
Write-Host "[14:32:45] PS C:\Users\Utilisateur> " -ForegroundColor DarkGray

# Exemple 2: Prompt avec statut administrateur
$promptExample2 = @'
function prompt {
    $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

    if ($isAdmin) {
        Write-Host "[ADMIN] " -NoNewLine -ForegroundColor Red
    } else {
        Write-Host "[USER] " -NoNewLine -ForegroundColor Green
    }

    Write-Host "$(Get-Location) " -NoNewLine -ForegroundColor Yellow
    return "$ "
}
'@
Write-Host "`n2. Prompt avec statut administrateur :" -ForegroundColor Yellow
Write-Host $promptExample2 -ForegroundColor Gray
Write-Host "R√©sultat : " -NoNewline
Write-Host "[USER] " -NoNewline -ForegroundColor Green
Write-Host "C:\Users\Utilisateur " -NoNewline -ForegroundColor Yellow
Write-Host "$ " -ForegroundColor DarkGray

# Exemple 3: Oh My Posh
$promptExample3 = @'
# Dans votre profil PowerShell ($PROFILE)
oh-my-posh init pwsh --config "$env:POSH_THEMES_PATH\paradox.omp.json" | Invoke-Expression
'@
Write-Host "`n3. Prompt avec Oh My Posh :" -ForegroundColor Yellow
Write-Host $promptExample3 -ForegroundColor Gray
Write-Host "R√©sultat : Un prompt riche avec ic√¥nes, informations Git, etc." -ForegroundColor DarkGray

Pause-Demo

#----------------------------------------------------------
# SECTION 3: Historique et raccourcis clavier
#----------------------------------------------------------
Show-Title "2-3. Historique de commandes et raccourcis clavier"

# Informations sur l'historique
$historyCount = (Get-History).Count
$readlineOptions = if (Get-Module -Name PSReadLine) { Get-PSReadLineOption } else { $null }

Write-Host "`nInformations sur votre historique de commandes :" -ForegroundColor Green
Write-Host "- Nombre de commandes dans l'historique actuel : $historyCount"
if ($readlineOptions) {
    Write-Host "- Taille maximale de l'historique : $($readlineOptions.MaximumHistoryCount)"
    Write-Host "- Historique dupliqu√© : $($readlineOptions.HistoryNoDuplicates)"
    Write-Host "- Chemin de sauvegarde : $($readlineOptions.HistorySavePath)"
} else {
    Write-Host "- Module PSReadLine non charg√©, impossible d'obtenir les options d'historique" -ForegroundColor Yellow
}

# Raccourcis clavier essentiels
$keyboardShortcuts = @(
    @{Shortcut = "Tab"; Action = "Compl√©tion automatique des commandes et chemins"},
    @{Shortcut = "Fl√®che Haut"; Action = "Naviguer dans l'historique des commandes"},
    @{Shortcut = "Ctrl+r"; Action = "Recherche inverse dans l'historique"},
    @{Shortcut = "Ctrl+l"; Action = "Effacer l'√©cran"},
    @{Shortcut = "Ctrl+c"; Action = "Annuler la commande en cours"},
    @{Shortcut = "Ctrl+a"; Action = "Aller au d√©but de la ligne"},
    @{Shortcut = "Ctrl+e"; Action = "Aller √† la fin de la ligne"},
    @{Shortcut = "Ctrl+‚Üê"; Action = "D√©placer le curseur d'un mot vers la gauche"},
    @{Shortcut = "Ctrl+‚Üí"; Action = "D√©placer le curseur d'un mot vers la droite"},
    @{Shortcut = "F7"; Action = "Afficher une liste interactive de l'historique"}
)

Write-Host "`nRaccourcis clavier essentiels :" -ForegroundColor Green
$i = 1
foreach ($shortcut in $keyboardShortcuts) {
    Write-Host "$i. " -NoNewline
    Write-Host $shortcut.Shortcut -NoNewline -ForegroundColor Yellow
    Write-Host " : $($shortcut.Action)"
    $i++
}

# Configuration avanc√©e de PSReadLine
$psReadLineConfig = @'
# Configuration de PSReadLine dans votre profil
Import-Module PSReadLine

# Pr√©diction bas√©e sur l'historique
Set-PSReadLineOption -PredictionSource History
Set-PSReadLineOption -PredictionViewStyle ListView

# Recherche dans l'historique avec les fl√®ches
Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward
Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward

# Effacer l'√©cran avec Ctrl+l
Set-PSReadLineKeyHandler -Key "Ctrl+l" -Function ClearScreen

# Historique sans doublons
Set-PSReadLineOption -HistoryNoDuplicates

# Sauvegarde de l'historique
$historyFile = Join-Path ([Environment]::GetFolderPath('UserProfile')) '.ps_history'
Set-PSReadLineOption -HistorySavePath $historyFile
'@

Write-Host "`nConfiguration recommand√©e pour PSReadLine :" -ForegroundColor Green
Write-Host $psReadLineConfig -ForegroundColor Gray

Pause-Demo

#----------------------------------------------------------
# SECTION 4: Modules utiles
#----------------------------------------------------------
Show-Title "2-4. Modules utiles (PSReadLine, posh-git, Terminal-Icons, etc.)"

# V√©rifier les modules populaires install√©s
$popularModules = @(
    "PSReadLine",
    "posh-git",
    "Terminal-Icons",
    "PSScriptAnalyzer",
    "ImportExcel",
    "z"
)

Write-Host "`nV√©rification des modules populaires sur votre syst√®me :" -ForegroundColor Green
foreach ($module in $popularModules) {
    $isInstalled = $null -ne (Get-Module -Name $module -ListAvailable -ErrorAction SilentlyContinue)
    Write-Host "- $module : " -NoNewline
    if ($isInstalled) {
        $version = (Get-Module -Name $module -ListAvailable).Version | Select-Object -First 1
        Write-Host "Install√© (v$version)" -ForegroundColor Green
    } else {
        Write-Host "Non install√©" -ForegroundColor Yellow
    }
}

# Description des modules populaires
$moduleDescriptions = @(
    @{Name = "PSReadLine"; Description = "Am√©liore l'exp√©rience de ligne de commande avec coloration syntaxique, autocompl√©tion avanc√©e et pr√©diction."},
    @{Name = "posh-git"; Description = "Int√®gre des informations Git dans votre prompt et fournit une autocompl√©tion pour les commandes Git."},
    @{Name = "Terminal-Icons"; Description = "Ajoute des ic√¥nes pour les fichiers et dossiers dans l'affichage de Get-ChildItem."},
    @{Name = "PSScriptAnalyzer"; Description = "Analyse statique de code PowerShell pour identifier les probl√®mes et appliquer les bonnes pratiques."},
    @{Name = "ImportExcel"; Description = "Manipule des fichiers Excel sans avoir besoin d'Excel install√©."},
    @{Name = "z"; Description = "Navigation rapide vers les dossiers fr√©quemment utilis√©s √† l'aide d'un algorithme de fr√©quence et r√©cence."}
)

Write-Host "`nDescription des modules populaires :" -ForegroundColor Green
foreach ($module in $moduleDescriptions) {
    Write-Host "- " -NoNewline
    Write-Host $module.Name -NoNewline -ForegroundColor Yellow
    Write-Host " : $($module.Description)"
}

# Script d'installation group√©e
$installScript = @'
# Script d'installation des modules essentiels
$ModulesEssentiels = @(
    "PSReadLine",
    "Terminal-Icons",
    "posh-git",
    "z"
)

foreach ($Module in $ModulesEssentiels) {
    if (-not (Get-Module -ListAvailable -Name $Module)) {
        Write-Host "Installation du module $Module..." -ForegroundColor Green
        Install-Module -Name $Module -Scope CurrentUser -Force
    } else {
        Write-Host "Le module $Module est d√©j√† install√©" -ForegroundColor Yellow
    }
}
'@

Write-Host "`nScript pour installer les modules essentiels :" -ForegroundColor Green
Write-Host $installScript -ForegroundColor Gray

Pause-Demo

#----------------------------------------------------------
# SECTION 5: PowerShell Gallery
#----------------------------------------------------------
Show-Title "2-5. D√©couverte de la PowerShell Gallery"

# Statistiques de la PowerShell Gallery
$galleryStats = @{
    TotalModules = "10,000+"
    TotalScripts = "5,000+"
    TotalDownloads = "500,000,000+"
    PopularAuthors = "Microsoft, AWS, VMware, communaut√©..."
}

Write-Host "`nLa PowerShell Gallery en chiffres :" -ForegroundColor Green
Write-Host "- Nombre de modules : $($galleryStats.TotalModules)"
Write-Host "- Nombre de scripts : $($galleryStats.TotalScripts)"
Write-Host "- T√©l√©chargements cumul√©s : $($galleryStats.TotalDownloads)"
Write-Host "- Principaux auteurs : $($galleryStats.PopularAuthors)"

# Commandes pour interagir avec la PowerShell Gallery
Write-Host "`nCommandes essentielles pour la PowerShell Gallery :" -ForegroundColor Green
Write-Host "1. Recherche de modules :" -ForegroundColor Yellow
Write-Host '   Find-Module -Name "*Azure*"' -ForegroundColor Gray
Write-Host '   Find-Module -Tag "ActiveDirectory"' -ForegroundColor Gray

Write-Host "`n2. Installation de modules :" -ForegroundColor Yellow
Write-Host '   Install-Module -Name "Terminal-Icons" -Scope CurrentUser' -ForegroundColor Gray
Write-Host '   Install-Module -Name "dbatools" -Scope CurrentUser -RequiredVersion 1.0.0' -ForegroundColor Gray

Write-Host "`n3. Mise √† jour de modules :" -ForegroundColor Yellow
Write-Host '   Update-Module -Name "PSReadLine"' -ForegroundColor Gray
Write-Host '   Get-InstalledModule | Update-Module' -ForegroundColor Gray

Write-Host "`n4. Recherche de scripts :" -ForegroundColor Yellow
Write-Host '   Find-Script -Name "*backup*"' -ForegroundColor Gray
Write-Host '   Find-Script -Command "Get-SystemInfo"' -ForegroundColor Gray

# Modules populaires par cat√©gorie
$categoryModules = @{
    "Administration syst√®me" = @("PSWindowsUpdate", "Carbon", "dbatools")
    "Utilisation quotidienne" = @("ImportExcel", "Posh-SSH", "PSScriptAnalyzer")
    "Cloud" = @("Az", "AWS.Tools", "GoogleCloud", "AzureAD")
    "S√©curit√©" = @("Pester", "PSRM", "PowerShellProtect", "UniversalDashboard")
}

Write-Host "`nModules populaires par cat√©gorie :" -ForegroundColor Green
foreach ($category in $categoryModules.Keys) {
    Write-Host "`n$category :" -ForegroundColor Yellow
    foreach ($module in $categoryModules[$category]) {
        Write-Host "- $module" -ForegroundColor Gray
    }
}

Pause-Demo

#----------------------------------------------------------
# SECTION 6: Application pratique
#----------------------------------------------------------
Show-Title "Application pratique du Module 2"

Write-Host "`nLet's create a sample customized PowerShell environment!" -ForegroundColor Green
Write-Host "Voici comment appliquer les concepts du Module 2 en pratique :" -ForegroundColor Green

$sampleProfile = @'
# Ce code pourrait √™tre ajout√© √† votre $PROFILE

# 1. Charger les modules essentiels
$EssentialModules = @("PSReadLine", "Terminal-Icons", "posh-git", "z")
foreach ($Module in $EssentialModules) {
    try {
        Import-Module $Module -ErrorAction Stop
    } catch {
        Write-Warning "Module $Module non trouv√©. Utilisez 'Install-Module -Name $Module -Scope CurrentUser' pour l'installer."
    }
}

# 2. Configurer PSReadLine pour une meilleure exp√©rience
if (Get-Module PSReadLine) {
    # Activer pr√©diction bas√©e sur l'historique (PS 7.1+)
    if ($PSVersionTable.PSVersion.Major -ge 7 -and $PSVersionTable.PSVersion.Minor -ge 1) {
        Set-PSReadLineOption -PredictionSource History
        Set-PSReadLineOption -PredictionViewStyle ListView
    }

    # Recherche intelligente dans l'historique
    Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward
    Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward

    # Autocompl√©tion am√©lior√©e
    Set-PSReadLineKeyHandler -Key Tab -Function MenuComplete
}

# 3. D√©finir des alias pratiques
New-Alias -Name ll -Value Get-ChildItem
New-Alias -Name grep -Value Select-String
New-Alias -Name touch -Value New-Item
New-Alias -Name time -Value Measure-Command

# 4. Fonctions utiles
function which($command) {
    Get-Command -Name $command -ErrorAction SilentlyContinue |
    Select-Object -ExpandProperty Path -ErrorAction SilentlyContinue
}

function weather {
    (Invoke-WebRequest wttr.in).Content
}

function update-profile {
    . $PROFILE
    Write-Host "Profil recharg√© !" -ForegroundColor Green
}

# 5. Cr√©er un prompt personnalis√©
function prompt {
    # Obtenir l'√©tat de la derni√®re commande
    $lastSuccess = $?

    # V√©rifier si PowerShell est ex√©cut√© en tant qu'admin
    $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

    # Obtenir l'heure actuelle
    $time = Get-Date -Format "HH:mm:ss"

    # Mettre √† jour le titre de la fen√™tre
    $location = Get-Location
    $host.UI.RawUI.WindowTitle = "PS $location"

    # Affichage conditionnel selon le statut
    Write-Host "[$time] " -NoNewline -ForegroundColor Cyan

    if ($isAdmin) {
        Write-Host "[ADMIN] " -NoNewline -ForegroundColor Red
    }

    Write-Host "$location " -NoNewline -ForegroundColor Yellow

    # Afficher un emoji bas√© sur le succ√®s de la derni√®re commande
    if ($lastSuccess) {
        Write-Host "‚úì" -NoNewline -ForegroundColor Green
    } else {
        Write-Host "‚úó" -NoNewline -ForegroundColor Red
    }

    return " "
}

# 6. Message d'accueil
Write-Host "Bonjour $env:USERNAME!" -ForegroundColor Green
Write-Host "PowerShell v$($PSVersionTable.PSVersion) | $(Get-Date -Format 'dddd, dd MMMM yyyy')" -ForegroundColor Cyan
Write-Host "Type 'help' pour la liste des commandes personnalis√©es" -ForegroundColor DarkGray
'@

Write-Host "`nVoici un exemple complet de profil personnalis√© :" -ForegroundColor Green
Write-Host $sampleProfile -ForegroundColor Gray

#----------------------------------------------------------
# SECTION 7: Fin et r√©sum√©
#----------------------------------------------------------
Show-Title "R√©sum√© du Module 2"

Write-Host @"
`nCe script a illustr√© les concepts cl√©s du Module 2 :

‚úÖ Fichier de profil (`$PROFILE)
‚úÖ Customisation du prompt avec diff√©rentes m√©thodes
‚úÖ Historique de commandes et raccourcis clavier
‚úÖ Modules utiles qui am√©liorent l'exp√©rience PowerShell
‚úÖ PowerShell Gallery pour installer et mettre √† jour des modules

Prochaines √©tapes recommand√©es :
1. Cr√©ez ou modifiez votre propre profil PowerShell
2. Installez quelques modules utiles
3. Personnalisez votre prompt selon vos pr√©f√©rences
4. Configurez PSReadLine pour une meilleure exp√©rience
5. Explorez la PowerShell Gallery pour d√©couvrir de nouveaux outils

Bonne personnalisation de votre environnement PowerShell !
"@ -ForegroundColor White

Write-Host "`nFin du script de d√©monstration." -ForegroundColor Green
Write-Host "Au revoir et bonne continuation avec PowerShell!" -ForegroundColor Green
